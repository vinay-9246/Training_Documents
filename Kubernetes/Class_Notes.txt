
########################
Day 19 : 7th Jan. 2025
########################					

	Kubernetes ::::
	
		- It is a Open-Source Container Orchestration Tool 
		- Kubernetes is used to Deploy any type of Containers.
		- It is used to ensure high availability of the Applications/services running thru Containers.
		- Used to Ensure High Availability of Containers by creating Replicas of Containers.
		- It supports Auto-Scaling & Load Balancing.
		
	
	AWS 	- EKS/ECR/ECS
	
	Azure 	- AKS/ACR/ACS
	
	GCP 	- GKE/GCR/GCE
	
	
	Kubernetes :::
	
		- Open-Source Kubernetes
		
		- Kubernetes Architecture
		
		- Components/Terminologies of Kubernetes
		
		- Kubernetes Concepts 
		
			- Pods
			- Volumes 
			- Services 
			
Related to the Project :::
			
	Integrate Kubernetes, Docker with Jenkins
	Create CICD Pipeline using Jenkins, Docker & Kubernetes
		
		

########################
Day 20 : 8th Jan. 2025
########################

	Fundamentals of Kubernetes ::::
	
		- It is a Open-Source Container Orchestration Tool 
		- Kubernetes is used to Deploy any type of Containers.
		- It is used to ensure high availability of the Applications/services running thru Containers.
		- Used to Ensure High Availability of Containers by creating Replicas of Containers.
		- It supports Auto-Scaling & Load Balancing.
		
	
	AWS 	- EKS/ECR/ECS
	
	Azure 	- AKS/ACR/ACS
	
	GCP 	- GKE/GCR/GCE
	
	
	Kubernetes :::
	
		- Open-Source Kubernetes
		
		- Kubernetes Architecture
		
		- Components/Terminologies of Kubernetes
		
		- Kubernetes Concepts 
		
			- Pods
			- Volumes 
			- Services 
			
Related to the Project :::
			
	Integrate Kubernetes, Docker with Jenkins
	Create CICD Pipeline using Jenkins, Docker & Kubernetes
	
	
	Kubernetes Architecture :::
	
		Kubernetes Master 
		
			Kubernetes Worker_Node1,2,3,4,5
			
			
		Environments :
		
			Non-Prod Environments 							Prod Environment ( LIVE )
				
				DEV 
				BUILD 
				Test 
					QA 
					UAT 				===========>			Production Server1,2,3,4,5
											*.war 
										
		www.amazon.com ==> This web application is host in the Production Environment
		
		
	Kubernetes Architecture :::
	
		Kubernetes Master 
		
			Kubernetes Worker_Node1,2,3,4,5	
			
	Using Kubeadm 
	minikube 		# Light-weight version of Kubernetes
	
	
	Kubernetes Architecture & its Components!
	
		Kubernetes Components ::::

			API_Server 				--> # Acts as an interface to the kubernetes 
			
			ETCD 					--> # Single point of Source for Kubernetes Components 
			
			Scheduler				--> # To identify the Healthy Node for Deployments
			
			Controller Manager 		--> # To run the pods in its desired state 
			
			
			Kubelet 				--> # Is a Kubernetes Agent used to Create & Deploy the Pods
			
			KubeProxy				--> # Is used to enable pod networking by create Pod IP Address			
			
			CRI - Container RunTime Interface (Container-D)
									--> # It is used identify the Image from Container Registry for deployment
				
				
		
		Kubernetes Concepts / Terminologies ::::
		
		
			Kubernetes_Master			# Used to Create and Schedule the Deployments to Kubernetes_WorkerNodes
			
			Kubernetes_WorkNodes		# Target Servers 

			Kubectl 					# Is Command Line Utility, used to interact with Kubernetes Master 
			
			
	Concepts & Terminologies ::::
	
		PODS :::	--> Atomic unit of Schedule.
					--> Smallest unit of Task.
					-->	Any Task we execute in Kubernetes will be executed as Pod
					--> Pod runs the container within that.
		
		KUBECTL :::	--> Is a Command Line Utility to interract with Kubernetes Master.
		
		
		Kubernetes Cluster ::::
		
					--> Kubernetes Cluster is a Collection of Worker Nodes.
					
					Kubernetes Master 				1 Master Node.
					
						Kubernetes_WorkNode1
						Kubernetes_WorkNode2
						Kubernetes_WorkNode3

						
						Auto-Scaling Group -->
						
						Replicas of Containers(PODs) 9 Relicas
						
				Load Balancer!
				Kubernetes_Master:::	
				
					Kubernetes_Master1 									AWS Cloud 					
						Cluster1										Region1
							Kubernetes_WorkNode1
							Kubernetes_WorkNode2
							Kubernetes_WorkNode3					
						Cluster2										Region2
							Kubernetes_WorkNode1
							Kubernetes_WorkNode2
							Kubernetes_WorkNode3						
						Cluster3										Region3
							Kubernetes_WorkNode1
							Kubernetes_WorkNode2
							Kubernetes_WorkNode3						
																			
					Kubernetes_Master2 									AWS Cloud 					
						Cluster1										Region4
							Kubernetes_WorkNode1
							Kubernetes_WorkNode2
							Kubernetes_WorkNode3					
						Cluster2										Region5
							Kubernetes_WorkNode1
							Kubernetes_WorkNode2
							Kubernetes_WorkNode3						
						Cluster3										Region6
							Kubernetes_WorkNode1
							Kubernetes_WorkNode2
							Kubernetes_WorkNode3	


Next ::::

	Install and Configure Kubernetes Master Node and Worker Nodes using Kubeadm
	
		https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/
		
		https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/install-kubeadm/



########################
Day 21 : 9th Jan. 2025
########################		


	Install and Configure Kubernetes Master Node and Worker Nodes using Kubeadm
	
		https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/
		
		https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/install-kubeadm/		
		
		
	
		Kubernetes Master 				1 Master Node.
		
			Kubernetes_WorkNode1
			Kubernetes_WorkNode2	
		
		
	Following Commands to be executed in all the Nodes(Master&Worker)
	
		1. Launch 3 EC2 Instances - Ubuntu v22.04
		2. Update Inbound Rule - Security Group
		3. Set the Host Name 
		3.1. Disable Swap
		4. Install Docker 
		5. Install Container-D (CRI)
			- Configure Net-Filter Module 
			- Configure IP6 Table Ref.
			- Download Container-Package using curl command 
			- Install Container-D 
			- Configure Container-D Config.toml file 
			- Restart Container-D
		6. Install Kubeadm,Kubectl,Kubelet 
			- Download using curl command 
			- Install 
			- Enable kubelet 
		
	Following Commands to be executed only in Master Node		
		
		7. kubeadm init 									# To initialize Master Node 
					
	Following Commands to be executed in all Worker Nodes

		8. kubeadm join 									# To Attach Worker Nodes to Master Node.



	
	Working with Kubernetes Pods :::
	
	
	- Manifest File. 	--> defines the properties of the kubenetes pods and other objects. 
							*.yaml / *.json. 
	
	- kubectl 
	
	
	--> Namespace ::
	
	
--> Install and Configure Kubernetes Master & Worknodes 

--> Deploy a pod 

--> Login to Pod 

--> Create NodePort Services 

--> Access the Applications running inside the pode using web browser.


########################
Day 22 : 15th Jan. 2025
########################

	- Kubernetes Deployment Object 
	
	- Overview of Kubernetes Services 
		- NodePort Service 
		
	- Kubernetes Volumes 
		- Hostpath Volume 
	
	- Namespaces 
	
	
	- Kubernetes Deployment Object :::
		
		Kubernetes Master 				1 Master Node.
		
			Kubernetes_WorkNode1
			Kubernetes_WorkNode2
			
		How to deploy a pod :
		
			- Deployed 1 instance of pod to WorkerNode2 
			
		
		
		Kubernetes Deployment Controller Object :::
		
			- Create Replicas of Pods and deploy the pod instances to the WorkerNodes
			- Here, the Replicas are created using Replicaset 				
			- Used to Deploy the Replicas of Pods in the available WorkerNodes 
			- Perform Scale-Up and Scale-Down the Pod Instances 
			- Perform Upgrade and Downgrade the Pod Versions without any downtime. 
			- Deployment Strategy called - Rolling Update Strategy to ensure Zero DownTime during Upgrade/Downgrade.
			
			-> Creates : 1. Deployment Controller 
						 2. Replicaset
						 3. Pod Instances 
		
		What is Deployment of Application Service ???
		
			--> nginx:latest 
		
		What is Upgrade / Downgrade ???
					
			mywebapp-img:v1.1			-> LIVE 		
			
			mywebapp-img:v1.2			-> Upgraded to v1.2 
			
			
		Replicas/Copies of Pods ::::	
		
			mywebapp-img:v1.1			--> pod1	--> Deployed in WorkerNode2.
			
		Replicaset Controller Object :
		
			- Used to Create Replicas/Copies of pods 
			- Replicaset Created Automatically during the Deployment Object Creation
			
			- replicas : 3 
		
			mywebapp-img:v1.1			--> Creates 3 replicas of pods : pod1, pod2, pod3 
										--> Deploy the 3 replicas of pods in available WorkerNodes.
										
										
			Web Applications :
			
				- E-Commerce Apps - www.amazon.com
				
				- On-Line Ticket Booking System
										
			
			Production Server1			===> 1000 Users ==> 5000 Users
			
			Production Server1,2,3,4,5  ===> 5000 Users 
			
			Kubernetes Environments ::
			
				Kubernetes_Master
				
					Kubernetes_WorkNode1,2,3,4,5 (LIVE Servers)
					
					15 instance of pod ?
					
			Deployment Controller Object :::
			
				mywebapp-img:v1.1 ::: 					replicas : 3 
					
					pod1	- mywebapp-img:v1.1
					
					pod2	- mywebapp-img:v1.1
					
					pod3	- mywebapp-img:v1.1
		
		
				mywebapp-img:v1.2 :::					
			
					pod1	- mywebapp-img:v1.2
					
					pod2	- mywebapp-img:v1.2
					
					pod3	- mywebapp-img:v1.2				
				
			-	Deployment Strategy - Rolling Update Strategy  # To ensure Zero DownTime during Upgrade/Downgrade.
			
				mywebapp-img:v1.2 :::					replicas : 3 

					pod1	- mywebapp-img:v1.2

					pod2	- mywebapp-img:v1.2
					
					pod3	- mywebapp-img:v1.2
					

		Environments :
		
			Non-Prod Environments 							Prod Environment ( LIVE )
				
				DEV 
				BUILD 
				Test 
					QA 
					UAT 				===========>			Production Server1,2,3,4,5
											*.war 
										
		
			Kubernetes Architecture :::							Kubernetes Architecture :::
	                                                            
				Non-Prod Kubernetes Master                            Prod Kubernetes Master 
		                                                        
					Non-Prod Kubernetes Worker_Node1,2,3,4,5	      	Prod Kubernetes Worker_Node1,2,3,4,5
	
	
	
		Kubernetes_Master
			Kubernetes_WorkNode1		--> pod1
			Kubernetes_WorkNode2		--> pod2
			
			
			
	Kubernetes services :
	
		- NodePort Service :::
		
				--> Used to Expose the pod to Internet 
				
				--> It is a special type of service, which can assign addition port ranges from 30000 to 32767.
				
				--> Map the deployment object to NodePort Service, it will be applicable to all corresponding pods.
				
				--> Access it thru. 
				
						# Open Web-browser and access webapge using 
							http://<external-nodeip>:<nodeport>

							#eg.: http://15.207.116.47:32487
		
			
