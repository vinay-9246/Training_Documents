###update vi etc/ansible/hosts


[testnodes]
samplenode1 ansible_ssh_host=172.31.2.214 ansible_ssh_user=ansibleadmin
samplenode2 ansible_ssh_host=172.31.8.11 ansible_ssh_user=ansibleadmin


#**************************************************************************************************************************
#hosts file is the default Inventory file for ansible 
#**************************************************************************************************************************
#Access thru Ansible Controller :
#**************************************************************************************************************************

ansible <hosts_name> -m <module_name> -i <inventory_file>

ansible testnodes -m ping 

ansible devnodes -m ping 


ansible dev_server_grp1 -m ping -i dev_servers

#host machines can be identified using :
#all | group_name | individual_host_name




#**************************************************************************************************************************
#Access thru Ansible Controller :
#**************************************************************************************************************************
Ansible Modules: Eg.: 
ansible testnodes -m ping

ansible all -m ping ### will ping all hosts from /etc/ansible/hosts file

ansible samplenode1 -m ping
ansible samplenode2 -m ping

#or using user defined Inventory file
#ansible ansible-node1 -m ping -i myinventoryfile.txt


ansible samplenode1 -m ping -i myinventoryfile.txt

#**************************************************************************************************************************

ansible samplenode2 -m ping

ansible samplenode1 -m shell -a "sleep 20 ; echo 'hi'"


#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Ansible Facts!

ansible samplenode1 -m setup
ansible samplenode1 -m setup -a "filter=ansible_mounts"


ansible testnodes -m setup -a "filter=ansible_distribution"




##Transfer a file from Ansible Controller to Target Nodes using copy Module

ansible samplenode1 -m copy -a "src=/etc/ansible/file1.txt dest=/home/ansibleadmin"

ansible samplenode1 -m copy -a "src=/etc/ansible/s1.txt dest=/home/ansibleadmin backup=yes"

##Transfer a file from Ansible Nodes to Ansible Controller using fetch Module
ansible samplenode1 -m fetch -a "src=/home/ansibleadmin/filefrom_AN1.txt dest=/home/devopsadmin"

Ansible_Controller :

	-- AN1 - Jenkins_Slave		== *.war
	
	-- AN2 - Tomcat_Server 		== *.war
	


UseCase 1 :
	- Deploy an artifact *.war from Jenkins Slave Machine to QA-Server.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


https://docs.ansible.com/ansible/2.9/modules/list_of_all_modules.html





### List all modules:
ansible-doc -l
### No. of modules:
ansible-doc -l | wc -l
### Search for specific modules:
ansible-doc -l | grep shel
### To know about any specific modules:
ansible-doc shell




#**************************************************************************************************************************
Ansible Playbooks :::
#**************************************************************************************************************************
*.yaml scripts 		==> Key-value pair

- Playbook creation



Playbooks :::::

	- *.yaml Script
	- Defines the Tasks/Modules to be executed in target nodes.
	- Reusability
	
	
Build Server :::

	- install jdk 
	- install git 
	- install maven


#**************************************************************************************************************************
#Ansible Variables !
#shell : echo $var1 

in yaml : "{{var1}}"


ansible samplenode1 -m setup

debug - 
	msg 	- used to print the constant value and variable data
	var 	- used to print only the variable data

key:Value pair 

#debugmod.yaml / *.yml

---
 - hosts: testnodes
   tasks:
   - debug:  
      msg:
       - "The os distribution is: {{ansible_distribution}}" 
       - "THe os name is: {{ansible_system}}"
       - "The os family is: {{ansible_os_family}}"
	   
	   
	Execute :::
	
			ansible-playbook debugmod.yaml 


#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#~~~~~~~~~~~~~~~~~~~~~~~~~ test_var-datatype.yaml
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#test_var-datatype.yaml
---
 - hosts: samplenode1
   vars:
    x: 23
    my_num: 45.67
    my_name: Loksai
    my_b: YES   
   tasks:
   - debug:
      msg:
       - "The value of x is: {{x}}"
       - "THe value of my_num: {{my_num}}"
       - "The value of my_name : {{my_name}}"
       - "THe value of my_b is: {{my_b}}"



---
 - hosts: samplenode1
   gather_facts: false
   vars:
    x: 23
    my_num: 45.67
    my_name: Loksai
    my_b: YES
   tasks:
   - debug:
      msg:
       - "The value of x is: {{x}}"
       - "THe value of my_num: {{my_num}}"
       - "The value of my_name : {{my_name}}"
       - "THe value of my_b is: {{my_b}}"



#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#/etc/ansible/variables/myvarfile1.yaml
    x: 26
    my_num: 45.00067
    my_name: Loksai_ETA
    my_b: YES

#test_var-datatype1.yaml
---
 - hosts: samplenode1
   vars_files:
     - /etc/ansible/variables/myvarfile1.yaml
   tasks:
   - debug:
      msg:
       - "The value of x is: {{x}}"
       - "THe value of my_num: {{my_num}}"
       - "The value of my_name : {{my_name}}"
       - "THe value of my_b is: {{my_b}}"


####################################################################################
---
 - hosts: samplenode1
   gather_facts: false
   become: yes
   tasks:
   - name: Manage nginx tool
     apt:
       name: nginx
       state: present
	   

Eg:
	name : nginx
	
	state : present/absent/latest
	
	sudo apt install nginx			# In Linux Ubuntu 
	
	sudo apt remove nginx			# In Linux Ubuntu 



#######################################################################################################


#var3.yaml
---
 - hosts: "{{ host_name }}"
   become: yes
   tasks:
   - name: Manage "{{ tool_name }}" service
     apt:
       name: "{{ tool_name }}"
       state: "{{ tool_state }}"


ansible-playbook var3.yaml -e "host_name=testnodes tool_name=nginx tool_state=present"




Handling Variables in Ansible :::

	- Environment variables -- accessible using Setup Module.
	
	- Hardcoding the values in playbook 
		using vars :
	
	- Using External Variable files :
		using var_files

	- Using -e to pass the values at run time.


Handling Variables :::

	--> Hardcoding the variables --> vars:
	--> Using Variables files    --> vars_files: 	#recommended approach
	--> Passing Extra values     --> -e 



Using When Condition :::

---
  - hosts: testnodes
    become: yes
    tasks:
      - name: Install-nginx on Debian
        apt:
          name: nginx
          state: "{{pkg_state}}"
        when: ansible_os_family == "Debian"
      - name: Install-nginx on Redhat
        yum:
          name: nginx
          state: "{{pkg_state}}"
        when: ansible_os_family == "RedHat"

