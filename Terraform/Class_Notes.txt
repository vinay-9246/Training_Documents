
########################
Day 29 : 28th Jan. 2025
########################

	Fundamentals of Terraform :::
	
	Prometheus & Grafana :::

	Capstone Project discussion :::
	
	
	Fundamentals of Terraform ::: 
	
	
		
	IAC Tools :::

		- Infra-Structure As Code:
		
			- Based on Declarative Scripts --> *.json,*.yaml,*.hcl
			- Based on Key:Value pairs
			
		- Terraform		# Provisioning/creation of IT Resources 
		
			Terraform/Cloudformation/ARM
		
		- Ansible 		# Configuration Management of IT Resources 
			
			Ansible/Chef/Puppet
	


	- Overview of Terraform

			- IAC Tool used to Provision/Create the IT Infra-Structure resources like VMs
			- It uses HCL Language --
				- HashiCorp Declarative Language (based on json file format)
					
				
			

	- Terraform Architecture :
	
	- Terraform Working Model :
	
		--> Identify the Scope 			# Identify the Target Platform (AWS/Azure/GCP)
		
		--> Write Terraform Script 		# Create Resource definition 
		
		--> Perform Terraform Init		# Initialize Terraform Provider to the Terraform Project 
										# It is to download the Terraform Provider to the Terraform Project 
		
		--> Perform Terraform Plan		# Preview the Script and resource definition
		
		--> Perform Terraform Apply		# To Apply the changes in the actual Infra-Structure
		
	
	- Terraform Registry / Providers 

			https://registry.terraform.io/

	
	- Installation and configuration of Terraform 
	
			https://developer.hashicorp.com/terraform/tutorials/aws-get-started/install-cli
		
		Infra-Structure Mgmt Team :
		
			-> Local Machine (Laptop)
			
				-> Using Package Manager 
						https://developer.hashicorp.com/terraform/tutorials/aws-get-started/install-cli
				
				-> Using Manual Installation				
						https://developer.hashicorp.com/terraform/install


				Using Manual Approach - Install Terraform on local windows machine 
				
					- Download Windows AMD64 Version Terraform -- zipfile 
						- Right Click and Extract all 
							- Get the Extracted Terraform Folder 
								- Get the terraform - binary file 
								
								C:\Softwares\terraform_1.7.2_windows_amd64
								
					- Setup Environment Variable for terraform binary file 
						- from windows start menu, search for enviroment variable 
							- click of edit enviroment variable setting 
								- find system properties dialog 
									- select enviroment variables button
										- On Environment Variables Dialog 
											- goto to System Variable 
												- Select path variable and edit 
													- Click on New 
														- add C:\Softwares\terraform_1.7.2_windows_amd64
															- apply the changes and close the settings
				
				
				
				
		- Install Visual Studio Code 	- IDE used to create Terraform Projects 
			
				https://code.visualstudio.com/download
				
		
		- Open Visual Studio Code - Create Terraform Project 


		- Open Visual Studio Code - Create Terraform Project 
		
			On Visual Studio Code : Install Terraform Extension for Visual Studio Code 
	
				HashiCorp Terraform
	
	- Working with Terraform
	
	
		Using Terraform  we can :
		
		
			1. Create/Add Resources 		+
			
			2. Update/Modify Resources 		~
			
			3. Delete/Destroy Resources 	-
			
			
		Create a Project in Visual Studio Code :::
		
			- Open a Folder 
			
			- Goto Terminal Menu and Open Terminal 
			
			-	$ terraform --version

provider "aws" {
  region     = "ap-south-1"
  access_key = "AsadfXWY"
  secret_key = "LasdfaasdfT"
}

# Create AWS Instance

resource "aws_instance" "instance1" {
  
  ami           = "ami-0dee22c13ea7a9a67"
  instance_type = "t2.micro"
  key_name      = "may20-keypair"

  tags = {
    Name = "TestInstance1"
  }
}


		
	- Terraform Working Model :
	
		--> Identify the Scope 			# Identify the Target Platform (AWS/Azure/GCP)
		
		--> Write Terraform Script 		# Create Resource definition 
		
		--> Perform Terraform Init		# Initialize Terraform Provider to the Terraform Project 
										# It is to download the Terraform Provider to the Terraform Project 
		
		--> Perform Terraform Plan		# Preview the Script and resource definition
		
		--> Perform Terraform Apply		# To Apply the changes in the actual Infra-Structure



		
Next :
		
		Terraform State File ::::
		
		Create Terraform Project with New VPC and associated resources 
		
		Best Practices to be followed while using Terraform
		
		Real time scenarios 
		
		Use Terraform in DevOps Pipeline 

		

########################
Day 30 : 29th Jan. 2025
########################

		Terraform State File ::::
		
			- Gets created/Updated when we execute terraform apply Command.
			- terrafom.tfstate file is used maintain the current status of the real infra-structure.
		
		Create Terraform Project with New VPC and associated resources 
		
		Best Practices to be followed while using Terraform
		
		Real time scenarios 
		
		Use Terraform in DevOps Pipeline 
		
		
	Scenario 1 :::
	
		Jenkins CICD Pipeline :
		
			SCM_Checkout ==> Application_Build	==> Deployed to Test-Tomcat_Server 
	
	
		Pipeline 1:		# Infra-Structure Provision & Configure Infra-Structure
		
			SCM_Checkout	==> 	Provision/Create New_Test_Server(Terraform)	==>		Configure New_Test_Server(Ansible)
			
			
		Jenkins CICD Pipeline :
		
			SCM_Checkout ==> Application_Build	==> Deployed to New_Test_Server	


	Scenario 2 ::: GitOps Approach 
	
			==>	SCM_Checkout	
			
				==>	Application_Build		
					
					==>	Provision/Create New_Test_Server(Terraform)	
						
						==>	Configure New_Test_Server(Ansible)	

							==> Deployed to New_Test_Server	
							
								==> Automated Testing (Selenium)
								
									==> Send the Test Result to Dev_Team  
									
										==> Destroy New_Test_Server and End the Pipeline
		
Terraform CLI Commands :

terraform init

terraform plan

terraform apply

terraform destroy

terraform state list

terraform apply -auto-approve

terraform destroy -auto-approve




provider "aws" {
  region     = "ap-south-1"
  access_key = "AsadfXWY"
  secret_key = "LasdfaasdfT"
}


# Create VPC

resource "aws_vpc" "myvpc9" {
  cidr_block       = "10.0.0.0/16"
  instance_tenancy = "default"

  tags = {
    Name = "myvpc9"
  }
}

# Create Subnet 

resource "aws_subnet" "mysubnet9" {
  vpc_id     = aws_vpc.myvpc9.id
  cidr_block = "10.0.1.0/24"

  tags = {
    Name = "mysubnet9"
  }
}

# Internet Gateway

resource "aws_internet_gateway" "mygw9" {
  vpc_id = aws_vpc.myvpc9.id

  tags = {
    Name = "mygw9"
  }
}

# Route Table

resource "aws_route_table" "myrt9" {
  vpc_id = aws_vpc.myvpc9.id

  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.mygw9.id
  }

  tags = {
    Name = "myrt9"
  }
}

# Route Table Association

resource "aws_route_table_association" "myrta9" {
  subnet_id      = aws_subnet.mysubnet9.id
  route_table_id = aws_route_table.myrt9.id
}

# Security Groups

resource "aws_security_group" "mysg9" {
  name        = "mysg9"
  description = "Allow inbound traffic"
  vpc_id      = aws_vpc.myvpc9.id

  ingress {
    description      = "HTTP"
    from_port        = 80
    to_port          = 80
    protocol         = "tcp"
    cidr_blocks      = ["0.0.0.0/0"]
  }

  ingress {
    description      = "SSH"
    from_port        = 22
    to_port          = 22
    protocol         = "tcp"
    cidr_blocks      = ["0.0.0.0/0"]
  }

  egress {
    from_port        = 0
    to_port          = 0
    protocol         = "-1"
    cidr_blocks      = ["0.0.0.0/0"]
    ipv6_cidr_blocks = ["::/0"]
  }

  tags = {
    Name = "mysg9"
  }
}

# Create Instance

resource "aws_instance" "instance9" {
  ami           = "ami-0f58b397bc5c1f2e8"
  instance_type = "t2.micro"
  associate_public_ip_address = true
  subnet_id = aws_subnet.mysubnet9.id
  vpc_security_group_ids = [aws_security_group.mysg9.id]
  key_name = "awskey-124"
  count = 2

  tags = {
    Name = "Dummy_Server0"
  }
}


