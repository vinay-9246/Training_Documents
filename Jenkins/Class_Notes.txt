	
#######################
Day 12 : 20th Dec. 2024
#######################	

	Build Orchestration Tool - Jenkins.
	
	Jenkins - Is an Open-Source Build Orchestration Tool.
	Used Automate Application Builds and Deployments.
	
	Other Products :
	
		gitlab-ci
		bamboo
		Azure Pipelines
		AWS Code Pipeline 
		
	Jenkins Architecture :
	
		- Jenkins is based on Master-Slave Architecture ::
		
			Jenkins_Master Node(VM)		- Install jdk,jenkins,git.
										- Used to Create the CI/CD Pipeline Projects and schedule to run in slave nodes.
									
				Jenkins_Slave Node(VM)	- To Execute the Application Build.
										- Perform Application Build - Compile, Unit Test, Create Artifacts 
									

				- Build the Source Code 		
						# Is a process of Compiling the Source Code and Creating Artifacts(Binaries/Executables - *.exec/*.dll/*.jar/*.war)
						
		Scenario 1 :
			
			Jenkins_Master Node(VM)		- Install jdk,jenkins,git. Install Build Tools like maven
			
		Scenario 2 :
		
            Jenkins_Master Node(VM)		- Create the CI/CD Pipeline Projects and schedule to run in slave nodes.
			
				Jenkins_Slave_Node1(VM)	- Java Application Build maven
				Jenkins_Slave_Node2(VM)	- Python Application Build
				Jenkins_Slave_Node3(VM)	- .Net Application Build
				Jenkins_Slave_Node4(VM)	- Ruby Application Build
				Jenkins_Slave_Node5(VM)	- Angular/NodeJS Application Build
				
				
		CI/CD Workflow :::
		
			SCM_Checkout 
			Application Build 
			Unit Testing 
			Create Artifacts 
			Promote the Application to Test Environments
			Notify 
			Deploy to Prod 
			
	
	- Working with Jenkins ::
	
		- Developers' Perspective :
			- Developers are just the consumers of Jenkins Projects 
			- Developers can Execute/Cancel/Read the Jenkins Job Output
		
		
		- DevOps Perspective :
			- DevOps Team are the Administrator of Jenkins.
			
			Roles & Responsibilies of DevOps Team :			
			
			Jenkins Administration 
				- Installation of Jenkins
				- Plugins Management 
				- Global System Configurations 
				- Tools Management 
				- User Management 
				- Security Management				
				- Credential Management 
				- Master/Slave Node Configurations
				- Creation CICD Pipeline Projects 
				- Onboard Applications to use Jenkins CICD Projects  
				- Periodic Upgrade of Jenkins and its plugins 
				- Periodic Backup 
				- Troubleshooting the Issues!
				
	- Installation of Jenkins :::
	
		--> Jenkins can be installed in Linux - Ubuntu Machine AMI - v22.04
				https://www.jenkins.io/doc/book/installing/
				
				https://www.jenkins.io/doc/book/installing/linux/
				
			Jenkins run as a service, it runs in default port 8080 
			
#######################
Day 13 : 24th Dec. 2024
#######################	

	Jenkins Administration 
		- Installation of Jenkins
		- Plugins Management 		
		- Global System Configurations 
		- Tools Management 
		- User Management 
		- Security Management				
		- Credential Management 



	- Create Jenkins Projects :

		- Free Style Projects :
			# Based on manual configurations
		
		
			
	Handling Variables in Jenkins :
	
		- Environment Variables :
		
			"${JOB_NAME}"
		
		
		- User-Defined Variables :
		
		

		- Pipeline Projects		
			# Based on groovy scripts 
			# To onboard the Application to CICD Process.
			# Used to Automate the Builds and Deployments and any process automation.
	
			# Pipeline composed of various stages
			# Stages are used to execute some task.
			
			Jenkins_Master Node(VM)		- Create the CI/CD Pipeline Projects and schedule to run in slave nodes.
			
		CI/CD Workflow :::
		
			SCM_Checkout 
			Application Build 
			Unit Testing 
			Create Artifacts 
			Promote the Application to Test Environments
			Notify 
			Deploy to Prod 
			
			
			
		Types of Pipeline Projects :
		
			- Scripted Pipeline 
			
				
			
			- Declarative Pipeline 

pipeline {
    agent any

    stages {
        stage('Hello1') {
            steps {
               sh 'echo "Hello1" >> file1.txt'
            }
        }
        stage('Hello2') {
            steps {
                sh 'echo "Hello2" >> file2.txt'
            }
        }
    }
}


pipeline {
    agent any

    stages {
        stage('SCM_Checkout') {
            steps {
               echo "Perform SCM Checkout"
            }
        }
        stage('Application Build') {
            steps {
                echo "Perform Application Build"
            }
        }
        stage('Deploy to Test Server') {
            steps {
                echo "Perform Application Deployment"
            }
        }
    }
}

Next :

	Setup Jenkins Master-Slave Node
	
	Create Application Build and Deployments using CICD Pipeline Project



########################
Day 14 : 26th Dec. 2024
########################	

	Setup Jenkins Master-Slave Node
	
	Create Application Build and Deployments using CICD Pipeline Project	


	- Jenkins is based on Master-Slave Architecture ::
	
		Jenkins_Master Node(VM)		- Install jdk,jenkins,git.
									- Used to Create the CI/CD Pipeline Projects and schedule to run in slave nodes.
								
			Jenkins_Slave Node(VM)	- To Execute the Application Build.
						Agent		- Perform Application Build - Compile, Unit Test, Create Artifacts 
	
	
	Jenkins_Master Node(VM)			--> git, jdk, jenkins 
	
		Jenkins_Slave_Node1(VM)		--> jdk,maven,git
		
		SSH Connection between Jenkins_Master & Slave Nodes

			-> Host Name 
			-> User Name 
			-> Key Pair
				- Public key and private key
	
pipeline {
    agent { label 'slave1' }

    stages {
        stage('SCM_Checkout') {
            steps {
               echo "Perform SCM Checkout"
			   git 'https://github.com/SA-Team-DevOps-03-Dec-24/java-mvn-springbootapp.git'			   
            }
        }
        stage('Application Build') {
            steps {
                echo "Perform Application Build"
				sh 'mvn clean package'
            }
        }
        stage('Deploy to Test Server') {
            steps {
                echo "Perform Application Deployment"
            }
        }
    }
}	

		Environments :
	
		Non-Prod Environments														Production Environment (LIVE)
		
			Dev Environment	(VM)
				- Unit Test
			
			Build Environment (VM)
				- Unit Test
				
			Testing Environment (VM)
			
				- QA (VM) - Quality Assurance Testing 
				
				- UAT (VM) - User Acceptace Testing				==============>				Production Servers (VM)



	Create Target Environment :
	
		Tomcat Web Application Server 
		
		Launch a VM 		-- Install Tomcat
		
		
		Jenkins_Master Node(VM)		- Install jdk,jenkins,git.
									- Used to Create the CI/CD Pipeline Projects and schedule to run in slave nodes.
								
			Jenkins_Slave Node(VM)	- To Execute the Application Build.
						(Agent)		- Perform Application Build - Compile, Unit Test, Create Artifacts 
						
						
		Tomcat_Server (VM)			- To Execute and Test the Application Artifacts (*.war)
									- Install jdk, Tomcat.
									- Tomcat WAS runs in port 8080
		
			-> Host Name 
			-> User Name 
			-> Key Pair
				- Public key and private key	
	
	
		Publish Over SSH Plugin is used to copt the artifacts from Jenkins Slave Node to Tomcat Server
		
		Install Publish Over SSH Plugin in Jenkins Master.
		
Next ::

	--> Working with Tomcat & Deployment - CICD Pipeline 
	
	--> Build Triggers - Automation 
	
	--> Email Notifications 


	
########################
Day 15 : 27th Dec. 2024
########################	

	--> Working with Tomcat & Deployment - CICD Pipeline 
	
	--> Build Triggers - Automation 
	
	--> Email Notifications 
	
	
	
	Tomcat - Web Application Server 

	Deployment ???
	
	
	Source Server																		Target Server 
		
		Jenkins_Slave_Node1																	Tomcat Server
		
			*/target/*.war																		/opt/tomcat/webapps

	Upon Deployment :
	
		
			*/target/*.war																		/opt/tomcat/webapps/*.war



	Update the Pipeline with the deployment parameter using pipeline snippet generator



	
pipeline {
    agent { label 'slave1' }

    stages {
        stage('SCM_Checkout') {
            steps {
               echo "Perform SCM Checkout"
			   git 'https://github.com/SA-Team-DevOps-03-Dec-24/java-mvn-springbootapp.git'			   
            }
        }
        stage('Application Build') {
            steps {
                echo "Perform Application Build"
				sh 'mvn clean package'
            }
        }
        stage('Deploy to Test Server') {
            steps {
                script{
                   sshPublisher(publishers: [sshPublisherDesc(configName: 'Tomcat-Server', transfers: [sshTransfer(cleanRemote: false, excludes: '', execCommand: '', execTimeout: 120000, flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, patternSeparator: '[, ]+', remoteDirectory: '.', remoteDirectorySDF: false, removePrefix: 'target/', sourceFiles: 'target/*.war')], usePromotionTimestamp: false, useWorkspaceInPromotion: false, verbose: false)])
                }
            }
        }
    }
}	


sshPublisher(publishers: [sshPublisherDesc(configName: 'Tomcat-Server', transfers: [sshTransfer(cleanRemote: false, excludes: '', execCommand: '', execTimeout: 120000, flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, patternSeparator: '[, ]+', remoteDirectory: '.', remoteDirectorySDF: false, removePrefix: 'target/', sourceFiles: 'target/*.war')], usePromotionTimestamp: false, useWorkspaceInPromotion: false, verbose: false)])


	
	--> Build Triggers - Automation :::
	
		-> Build Periodic ::::		https://crontab.guru/
		
				- Used to trigger the jenkins jobs irrespective of code change. - It is not meant for CI/CD.
				- The build is sheduled based on the crontab 
				
				Eg.: 
				
				Schedule a jenkins job to run at 8AM 	-- Start_Servers
				Schedule a jenkins job to run at 10PM 	-- Stop_Servers
				
				
		- GitHub WebHook ::::
		
				- Used to trigger the jenkins Job whenever there is any commit happened in the remote repository
				- github webhook has be configured in the remote repository by using the jenkins URL	
				
				- Used to implement CICD 
			
				http://65.2.40.120:8080/github-webhook/
				
				
		- PollSCM ::::
		
				- It is used to trigger the build based on the crontab only if there is any changes happened in the source-code repository.
				
				
				Eg.: 
				
				Test Cycles :
				
					8AM - 12PM - 3PM
				
					
				
	--> Email Notifications :::::
	
		Email Notification can be sent as a post - build action.
		
		- success 
		
		- failure 
		
		- unstable 
		
Configure the Email Server in the Jenkins Global System Configuration using Email Notification Plugins :

Gmail Account :

Login to Gmail :::

Click Manage Account Settings

@Left side panel - select Security 

MFA --> mobile#

Search for App Password 

Generate App Password = 16 bytes of App Password. vajhvjbkbkjlk

What ? window
Which Appln - email			

goto manage jenkins -> system configuration 

goto Email Notification 
		
SMTP Server :
smtp.gmail.com

SMTP Authentication

SMTP Port :: 465






pipeline {
    agent { label 'slave1' }

    stages {
        stage('SCM_Checkout') {
            steps {
               echo "Perform SCM Checkout"
			   git 'https://github.com/SA-Team-DevOps-03-Dec-24/java-mvn-springbootapp.git'			   
            }
             post {
                failure {
                  sh "echo 'Send mail on failure'"
					mail bcc: 'l@gmail.com', body: 'Jenkins Jobs Status - Please go to ${BUILD_URL} and verify the build', cc: 'l@gmail.com', from: '', replyTo: '', subject: 'SCM-Checkout Failed ', to: 'l@gmail.com'
                }
              }
        }
        stage('Application Build') {
            steps {
                echo "Perform Application Build"
				sh 'mvn clean package'
            }
             post {
                failure {
                  sh "echo 'Send mail on failure'"
					mail bcc: 'l@gmail.com', body: 'Jenkins Jobs Status - Please go to ${BUILD_URL} and verify the build', cc: 'l@gmail.com', from: '', replyTo: '', subject: 'Application Build failed ', to: 'l@gmail.com'
                }
              }
        }
        stage('Deploy to Test Server') {
            steps {
                script{
                   sshPublisher(publishers: [sshPublisherDesc(configName: 'Tomcat-Server', transfers: [sshTransfer(cleanRemote: false, excludes: '', execCommand: '', execTimeout: 120000, flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, patternSeparator: '[, ]+', remoteDirectory: '.', remoteDirectorySDF: false, removePrefix: 'target/', sourceFiles: 'target/*.war')], usePromotionTimestamp: false, useWorkspaceInPromotion: false, verbose: false)])
                }
            }
             post {
                success {
                  sh "echo 'Send mail on failure'"
					mail bcc: 'l@gmail.com', body: 'Jenkins Jobs Status - Please go to ${BUILD_URL} and verify the build', cc: 'l@gmail.com', from: '', replyTo: '', subject: 'Application Deployment Successful ', to: 'l@gmail.com'
                }
                failure {
                  sh "echo 'Send mail on failure'"
					mail bcc: 'l@gmail.com', body: 'Jenkins Jobs Status - Please go to ${BUILD_URL} and verify the build', cc: 'l@gmail.com', from: '', replyTo: '', subject: 'Application Deployment failed ', to: 'l@gmail.com'
                }
              }
        }
    }
}	


	Periodic Backup ::
	
		/var/lib/jenkins			
	
	
Next ::
	Next Module.
